apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'signing'
apply plugin: 'maven'

buildscript {
    repositories {
        jcenter()
        maven {
            name 'JFrog OSS snapshot repo'
            url  'https://oss.jfrog.org/oss-snapshot-local/'
        }
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.0'
        classpath 'me.champeau.gradle:antlr4-gradle-plugin:0.1'
    }
}

apply plugin: 'me.champeau.gradle.antlr4'
apply plugin: 'com.github.johnrengelman.shadow'

group 'org.scassandra'
jar.baseName = 'cql-antlr'

compileJava {
    sourceCompatibility = "1.6"
    targetCompatibility = "1.6"
}

if (!project.hasProperty("ossrhUsername")) {
    ext.ossrhUsername = "dummy"
}
if (!project.hasProperty("ossrhPassword")) {
    ext.ossrhPassword = "dummy"
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven {
        url "https://oss.sonatype.org/content/groups/staging"
    }
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    baseName = 'cql-antlr'
    from sourceSets.main.allJava
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    baseName = 'cql-antlr'
    from 'build/docs/javadoc'
}

artifacts {
    archives jar
    archives javadocJar
    archives sourceJar
}

signing {
    sign configurations.archives
}


uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }
            pom.artifactId = 'cql-antlr'

            pom.project {
                name 'Scassandra CQL antlr'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'Allows Java applications to use Scassandra'
                url 'https://github.com/chbatey/cql-antlr'

                scm {
                    connection 'scm:git:git@github.com:chbatey/cql-antlr.git'
                    developerConnection 'git@github.com:chbatey/cql-antlr.git'
                    url 'https://github.com/chbatey/cql-antlr'
                }

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'chbatey'
                        name 'Christopher Batey'
                        email 'christopher.batey@gmail.com'
                    }
                }
            }
        }
    }
}

dependencies {
    compile 'org.antlr:antlr4-runtime:4.5'
    compile 'org.slf4j:slf4j-api:1.7.10'
    compile 'commons-codec:commons-codec:1.10'
    compile 'com.google.guava:guava:17.0'
    testCompile 'ch.qos.logback:logback-classic:1.1.1'
    testCompile 'org.mockito:mockito-all:1.9.5'
    testCompile 'junit:junit:4.11'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.2.1'
}

antlr4 {
    output = new File('src/main/generated/org/scassandra/antlr4')
    extraArgs = ['-package', 'org.scassandra.antlr4']
}

// make the Java compile task depend on the antlr4 task
compileJava.dependsOn antlr4

// add the generated source files to the list of java sources
sourceSets.main.java.srcDirs += 'src/main/generated'

// add antlr4 to classpath
configurations {
    compile.extendsFrom antlr4
}
